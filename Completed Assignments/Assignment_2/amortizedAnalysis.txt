1.
	16 consecutive pushes, starting capacity of 8:
	8+9+7 = 24 cost units
	
	32 consecutive pushes, starting capacity of 8:
	8+9+7+17+15 = 56 cost units
	
	O(2N)

2. 
	16 consecutive pushes, starting capacity of 8:
	8+9+1+11+1+13+1+15+1 = 60

	32 consecutive pushes, starting capacity of 8:
	8+9+1+11+1+13+1+15+1+17+1+19+1+21+1+23+1+25+1+27+1+29+1+31+1 = 260

	64 consecutive pushes, starting capacity of 8:
	260+33+1+...... = 1044	

	O((N/2)^2)

3.	
	If your array is full and you push one more time the array will
	doubble in size and have to reallocate sapce. If you pop right 	
	after that then once again your array will have to reallocate 
	sapce and copy all the values over. If theis pattern continues 
	it will produce a total cost of O(N)= N^2.

	To avoid this it would be better to have the array grow to double
	its size when the array is full and then pushed, and shrink to 
	half the size when the array is 1/4 full. That way the boundary of 
	poping is not at exactly the same place as the boundary for pushing
	and the size of the array will have to change drastically before
	memory needs to be reallocated.
